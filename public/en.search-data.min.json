[{"id":0,"href":"/post/2021-06-18-creating-this-page/","title":"Creating this site","parent":"Posts","content":"This site is a combination of several tools including\n Hugo (static websites) Github Lots of things from the Yihui universe (blogdown, rmarkdown, etc.). I know, I know it\u0026rsquo;s RStudio. netlify (recommended by the above, but github pages works too)  Make sure that the blogdown package is updated. Update Hugo if you need to.\nNetlify    Make sure you create the appropriate github repo to deploy from. There aren’t subdomains like github pages.\nThemes    Search for a Hugo theme that you want. The bookdown documentation recommends some in particular but you can try your luck with another one, just make sure you do some googling to make it work. Some themes require a bit of tweaking to get working. The themes I liked were those for documentation (duh).\n Geekdoc but it required (this approach)[https://stackoverflow.com/questions/65702805/geekdocs-hugo-template-not-compatible-with-blogdown] suggested Yihui. Learn (works out of the box)  Issues you might have depending on your theme    Math won\u0026rsquo;t render (just shows the LaTeX)    If the theme doesn\u0026rsquo;t render mathjax out of the box go into the folder themes//layouts/partials/ and find something that\u0026rsquo;ll always render like head.html or foot.html. At the end of the file after the \u0026lt;/html\u0026gt; add\n\u0026lt;script src=\u0026#34;//yihui.org/js/math-code.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script async src=\u0026#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; Plots from R aren\u0026rsquo;t showing up    In the root, open config.yaml\nIf there\u0026rsquo;s no markup header, add it in the correct spot with the following lines. If it\u0026rsquo;s there, add the lines that are missing.\nmarkup:goldmark:renderer:unsafe:trueIf markup exists, put goldmark and everything under in the right spot, if goldmark exists put renderer and everything under in the right spot, etc.\nCode highlighting    Depending on the theme you have the code highlighting may not be great. You can configure it by again modifying ``config.yaml` and adding the following (subset) of necessarily lines\nmarkup:highlight:codeFences:truehl_Lines:\u0026#39;\u0026#39;lineNoStart:1lineNos:inlinelineNumbersInTable:truestyle:monokaiThe second last line is the oen you want: monokai is default. You can choose anything from the Chroma style gallery.\n"},{"id":1,"href":"/postrepeat/2021-06-18-creating-this-page/","title":"Creating this site","parent":"Postrepeats","content":"This site is a combination of several tools including\n Hugo (static websites) Github Lots of things from the Yihui universe (blogdown, rmarkdown, etc.). I know, I know it\u0026rsquo;s RStudio. netlify (recommended by the above, but github pages works too)  Make sure that the blogdown package is updated. Update Hugo if you need to.\nNetlify    Make sure you create the appropriate github repo to deploy from. There aren’t subdomains like github pages.\nThemes    Search for a Hugo theme that you want. The bookdown documentation recommends some in particular but you can try your luck with another one, just make sure you do some googling to make it work. Some themes require a bit of tweaking to get working. The themes I liked were those for documentation (duh).\n Geekdoc but it required (this approach)[https://stackoverflow.com/questions/65702805/geekdocs-hugo-template-not-compatible-with-blogdown] suggested Yihui. Learn (works out of the box)  Issues you might have depending on your theme    Math won\u0026rsquo;t render (just shows the LaTeX)    If the theme doesn\u0026rsquo;t render mathjax out of the box go into the folder themes//layouts/partials/ and find something that\u0026rsquo;ll always render like head.html or foot.html. At the end of the file after the \u0026lt;/html\u0026gt; add\n\u0026lt;script src=\u0026#34;//yihui.org/js/math-code.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script async src=\u0026#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\u0026#34;\u0026gt; \u0026lt;/script\u0026gt; Plots from R aren\u0026rsquo;t showing up    In the root, open config.yaml\nIf there\u0026rsquo;s no markup header, add it in the correct spot with the following lines. If it\u0026rsquo;s there, add the lines that are missing.\nmarkup:goldmark:renderer:unsafe:trueIf markup exists, put goldmark and everything under in the right spot, if goldmark exists put renderer and everything under in the right spot, etc.\nCode highlighting    Depending on the theme you have the code highlighting may not be great. You can configure it by again modifying ``config.yaml` and adding the following (subset) of necessarily lines\nmarkup:highlight:codeFences:truehl_Lines:\u0026#39;\u0026#39;lineNoStart:1lineNos:inlinelineNumbersInTable:truestyle:monokaiThe second last line is the oen you want: monokai is default. You can choose anything from the Chroma style gallery.\n"},{"id":2,"href":"/post/2021-06-18-test-julia-thing/","title":"test julia thing","parent":"Posts","content":"This documents the timings of a simple newton method in R, C (technically cpp but it\u0026rsquo;s all just C code), and julia.\nThe function is \\(f_0(x)=e^x+\\sin(x)\\) so the newton update would be $$x\\leftarrow x-\\frac{f_0(x)}{f_1(x)}=x-\\frac{e^x+sin(x)}{e^x+cos(x)}$$\napplied repeatedly. A graph of the curve is shown below. It\u0026rsquo;s already fairly linear so the function will hit the root very quickly but that\u0026rsquo;s ok.\ncurve(exp(x)+sin(x),-1,0) We\u0026rsquo;ll run the code a fixed number of iterations. I don\u0026rsquo;t know if hitting 0 in the numerator does any short-cutting in any language but thats ok for now.\nJulia code    The julia is shown below. These lines are actually run in julia but at the end we\u0026rsquo;ll call it from R, so the code will be revisted at the end.\nf0(x)=exp(x)+sin(x) ## f0 (generic function with 1 method) f1(x)=exp(x)+cos(x) ## f1 (generic function with 1 method) update(x)=x-f0(x)/f1(x) ## update (generic function with 1 method) function getroot_julia() x=0.0 for i in 1:50000 x=update(x) end return x end ## getroot_julia (generic function with 1 method) using BenchmarkTools timing_julia = @benchmark getroot_julia() samples=5 evals=5 ## BenchmarkTools.Trial: ## memory estimate: 0 bytes ## allocs estimate: 0 ## -------------- ## minimum time: 1.024 ms (0.00% GC) ## median time: 1.044 ms (0.00% GC) ## mean time: 1.042 ms (0.00% GC) ## maximum time: 1.053 ms (0.00% GC) ## -------------- ## samples: 5 ## evals/sample: 5 print(timing_julia) ## Trial(1.024 ms) R code    The r code is shown below.\ngetroot_r=function(){ x=0.0 ee=0 for (i in 1:50000){ ee=exp(x) x=x-(ee+sin(x))/(ee+cos(x)) } return (x); } R cpp code    This is the rcpp code is shown here\n#include \u0026lt;Rcpp.h\u0026gt;using namespace Rcpp; //[[Rcpp::export]] double getroot_cpp() { double x=0.0; double ee=0.0; for(int i=0;i\u0026lt;50000;i++){ ee=exp(x); x=x-(ee+sin(x))/(ee+cos(x)); } return (x); } julia    The julia code (same as the code above) is entered into R so it can be called from R.\nlibrary(JuliaCall) julia_command(\u0026#34;f0(x)=exp(x)+sin(x)\u0026#34;) ## Julia version 1.6.0 at location /opt/julia-1.6.0/bin will be used. ## Loading setup script for JuliaCall... ## Finish loading setup script for JuliaCall. ## f0 (generic function with 1 method) julia_command(\u0026#34;f1(x)=exp(x)+cos(x)\u0026#34;) ## f1 (generic function with 1 method) julia_command(\u0026#34;update(x)=x-f0(x)/f1(x)\u0026#34;) ## update (generic function with 1 method) julia_command(\u0026#34;function getroot_julia() x=0.0 for i in 1:50000 x=update(x) end return x end\u0026#34;) ## getroot_julia (generic function with 1 method) Results    Now that all the functions are created and available, they\u0026rsquo;re assessed in R. Each runs the same number of iterations with the same initial guess. Each language\u0026rsquo;s implementation is run a few times times.\nlibrary(microbenchmark) results = microbenchmark(getroot_r(),getroot_cpp(),julia_eval(\u0026#34;getroot_julia()\u0026#34;),times=5) languages = c(\u0026#34;R\u0026#34;,\u0026#34;cpp\u0026#34;,\u0026#34;julia\u0026#34;) boxplot(results,names=languages) print(results) ## Unit: milliseconds ## expr min lq mean median uq ## getroot_r() 7.943091 7.998965 10.934808 8.341089 8.667582 ## getroot_cpp() 1.732864 1.844714 1.970274 1.881903 2.041330 ## julia_eval(\u0026quot;getroot_julia()\u0026quot;) 1.224786 1.235979 24.876575 1.245476 1.291839 ## max neval ## 21.72331 5 ## 2.35056 5 ## 119.38480 5 medians = summary(results)[,\u0026#34;median\u0026#34;] names(medians)=languages #speeds relative to r medians/max(medians) ## R cpp julia ## 1.0000000 0.2256184 0.1493182 #speeds relative to julia medians/min(medians) ## R cpp julia ## 6.697109 1.510991 1.000000 "},{"id":3,"href":"/postrepeat/2021-06-18-test-julia-thing/","title":"test julia thing","parent":"Postrepeats","content":"This documents the timings of a simple newton method in R, C (technically cpp but it\u0026rsquo;s all just C code), and julia.\nThe function is \\(f_0(x)=e^x+\\sin(x)\\) so the newton update would be $$x\\leftarrow x-\\frac{f_0(x)}{f_1(x)}=x-\\frac{e^x+sin(x)}{e^x+cos(x)}$$\napplied repeatedly. A graph of the curve is shown below. It\u0026rsquo;s already fairly linear so the function will hit the root very quickly but that\u0026rsquo;s ok.\ncurve(exp(x)+sin(x),-1,0) We\u0026rsquo;ll run the code a fixed number of iterations. I don\u0026rsquo;t know if hitting 0 in the numerator does any short-cutting in any language but thats ok for now.\nJulia code    The julia is shown below. These lines are actually run in julia but at the end we\u0026rsquo;ll call it from R, so the code will be revisted at the end.\nf0(x)=exp(x)+sin(x) ## f0 (generic function with 1 method) f1(x)=exp(x)+cos(x) ## f1 (generic function with 1 method) update(x)=x-f0(x)/f1(x) ## update (generic function with 1 method) function getroot_julia() x=0.0 for i in 1:50000 x=update(x) end return x end ## getroot_julia (generic function with 1 method) using BenchmarkTools timing_julia = @benchmark getroot_julia() samples=5 evals=5 ## BenchmarkTools.Trial: ## memory estimate: 0 bytes ## allocs estimate: 0 ## -------------- ## minimum time: 1.024 ms (0.00% GC) ## median time: 1.044 ms (0.00% GC) ## mean time: 1.042 ms (0.00% GC) ## maximum time: 1.053 ms (0.00% GC) ## -------------- ## samples: 5 ## evals/sample: 5 print(timing_julia) ## Trial(1.024 ms) R code    The r code is shown below.\ngetroot_r=function(){ x=0.0 ee=0 for (i in 1:50000){ ee=exp(x) x=x-(ee+sin(x))/(ee+cos(x)) } return (x); } R cpp code    This is the rcpp code is shown here\n#include \u0026lt;Rcpp.h\u0026gt;using namespace Rcpp; //[[Rcpp::export]] double getroot_cpp() { double x=0.0; double ee=0.0; for(int i=0;i\u0026lt;50000;i++){ ee=exp(x); x=x-(ee+sin(x))/(ee+cos(x)); } return (x); } julia    The julia code (same as the code above) is entered into R so it can be called from R.\nlibrary(JuliaCall) julia_command(\u0026#34;f0(x)=exp(x)+sin(x)\u0026#34;) ## Julia version 1.6.0 at location /opt/julia-1.6.0/bin will be used. ## Loading setup script for JuliaCall... ## Finish loading setup script for JuliaCall. ## f0 (generic function with 1 method) julia_command(\u0026#34;f1(x)=exp(x)+cos(x)\u0026#34;) ## f1 (generic function with 1 method) julia_command(\u0026#34;update(x)=x-f0(x)/f1(x)\u0026#34;) ## update (generic function with 1 method) julia_command(\u0026#34;function getroot_julia() x=0.0 for i in 1:50000 x=update(x) end return x end\u0026#34;) ## getroot_julia (generic function with 1 method) Results    Now that all the functions are created and available, they\u0026rsquo;re assessed in R. Each runs the same number of iterations with the same initial guess. Each language\u0026rsquo;s implementation is run a few times times.\nlibrary(microbenchmark) results = microbenchmark(getroot_r(),getroot_cpp(),julia_eval(\u0026#34;getroot_julia()\u0026#34;),times=5) languages = c(\u0026#34;R\u0026#34;,\u0026#34;cpp\u0026#34;,\u0026#34;julia\u0026#34;) boxplot(results,names=languages) print(results) ## Unit: milliseconds ## expr min lq mean median uq ## getroot_r() 8.172978 8.196277 11.047332 8.272662 8.423955 ## getroot_cpp() 1.723577 1.768750 1.913607 1.778483 2.025445 ## julia_eval(\u0026quot;getroot_julia()\u0026quot;) 1.221405 1.240774 24.379639 1.372730 1.421209 ## max neval ## 22.17079 5 ## 2.27178 5 ## 116.64208 5 medians = summary(results)[,\u0026#34;median\u0026#34;] names(medians)=languages #speeds relative to r medians/max(medians) ## R cpp julia ## 1.0000000 0.2149832 0.1659357 #speeds relative to julia medians/min(medians) ## R cpp julia ## 6.026431 1.295581 1.000000 "},{"id":4,"href":"/","title":"ms","parent":"","content":""},{"id":5,"href":"/postrepeat/","title":"Postrepeats","parent":"ms","content":""},{"id":6,"href":"/post/","title":"Posts","parent":"ms","content":""},{"id":7,"href":"/categories/","title":"Categories","parent":"ms","content":""},{"id":8,"href":"/post/2020-12-01-r-rmarkdown/","title":"Hello R Markdown","parent":"Posts","content":" R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   "},{"id":9,"href":"/postrepeat/2020-12-01-r-rmarkdown/","title":"Hello R Markdown","parent":"Postrepeats","content":" R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nYou can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 fit \u0026lt;- lm(dist ~ speed, data = cars) fit ## ## Call: ## lm(formula = dist ~ speed, data = cars) ## ## Coefficients: ## (Intercept) speed ## -17.579 3.932  Including Plots You can also embed plots. See Figure 1 for example:\npar(mar = c(0, 1, 0, 1)) pie( c(280, 60, 20), c(\u0026#39;Sky\u0026#39;, \u0026#39;Sunny side of pyramid\u0026#39;, \u0026#39;Shady side of pyramid\u0026#39;), col = c(\u0026#39;#0292D8\u0026#39;, \u0026#39;#F7EA39\u0026#39;, \u0026#39;#C4B632\u0026#39;), init.angle = -50, border = NA )  Figure 1: A fancy pie chart.   "},{"id":10,"href":"/tags/plot/","title":"plot","parent":"Tags","content":""},{"id":11,"href":"/categories/r/","title":"R","parent":"Categories","content":""},{"id":12,"href":"/tags/r-markdown/","title":"R Markdown","parent":"Tags","content":""},{"id":13,"href":"/tags/regression/","title":"regression","parent":"Tags","content":""},{"id":14,"href":"/tags/","title":"Tags","parent":"ms","content":""}]